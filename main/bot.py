# ./app/bot.py

import random
import pickle
import os
import json
import logging
import traceback
from enum import Enum
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from gtts import gTTS
from pydub import AudioSegment
from dotenv import load_dotenv
from data.config import CONFIG
from sklearn.metrics.pairwise import cosine_similarity
from rapidfuzz import process, fuzz

from main.utils import (
    clear_phrase, is_meaningful_text,
    extract_shoe_name, extract_shoe_category, extract_price, extract_brand,
    lemmatize_phrase, analyze_sentiment, Stats
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±—É–≤–∏ ---
DATA_DIR = os.path.join(os.path.dirname(__file__), '..', 'data')
PRODUCTS_PATH = os.path.join(DATA_DIR, 'products.json')
with open(PRODUCTS_PATH, encoding='utf-8') as f:
    PRODUCTS = json.load(f)
PRODUCTS_MAP = {item['name']: item for item in PRODUCTS}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ---
class BotState(Enum):
    NONE = "NONE"
    WAITING_FOR_ITEM = "WAITING_FOR_ITEM"
    WAITING_FOR_INTENT = "WAITING_FOR_INTENT"

# --- –ù–∞–º–µ—Ä–µ–Ω–∏—è ---
class Intent(Enum):
    HELLO = "hello"
    BYE = "bye"
    YES = "yes"
    NO = "no"
    SHOE_TYPES = "shoe_types"
    SHOE_PRICE = "shoe_price"
    SHOE_AVAILABILITY = "shoe_availability"
    SHOE_RECOMMENDATION = "shoe_recommendation"
    FILTER_SHOES = "filter_shoes"
    SHOE_INFO = "shoe_info"
    BOOK_FITTING = "book_fitting"
    COMPARE_SHOES = "compare_shoes"

# --- –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ ---
class ResponseType(Enum):
    INTENT = "intent"
    GENERATE = "generate"
    FAILURE = "failure"

# --- –ö–ª–∞—Å—Å –±–æ—Ç–∞ ---
class Bot:
    def __init__(self):
        # –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
        try:
            base = os.path.join(os.path.dirname(__file__), '..', 'models')
            with open(os.path.join(base, 'intent_model.pkl'), 'rb') as f:
                self.clf = pickle.load(f)
            with open(os.path.join(base, 'intent_vectorizer.pkl'), 'rb') as f:
                self.vectorizer = pickle.load(f)
            with open(os.path.join(base, 'dialogues_vectorizer.pkl'), 'rb') as f:
                self.tfidf_vectorizer = pickle.load(f)
            with open(os.path.join(base, 'dialogues_matrix.pkl'), 'rb') as f:
                self.tfidf_matrix = pickle.load(f)
            with open(os.path.join(base, 'dialogues_answers.pkl'), 'rb') as f:
                self.answers = pickle.load(f)
        except FileNotFoundError as e:
            logger.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}\n{traceback.format_exc()}")
            raise

    def _update_context(self, context, replica, answer, intent=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        context.user_data.setdefault('state', BotState.NONE.value)
        context.user_data.setdefault('current_shoe', None)
        context.user_data.setdefault('last_bot_response', None)
        context.user_data.setdefault('last_intent', None)
        context.user_data.setdefault('history', [])

        context.user_data['history'].append(replica)
        context.user_data['history'] = context.user_data['history'][-CONFIG['history_limit']:]
        context.user_data['last_bot_response'] = answer
        if intent:
            context.user_data['last_intent'] = intent

    def classify_intent(self, replica):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = replica.lower()
        if '—Å—Ä–∞–≤–Ω' in text or '—á–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è' in text:
            return Intent.COMPARE_SHOES.value
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized:
            return None
        vectorized = self.vectorizer.transform([replica_lemmatized])
        intent_pred = self.clf.predict(vectorized)[0]
        best_score = 0
        best_intent = None
        for intent_key, data in CONFIG['intents'].items():
            examples = [lemmatize_phrase(ex) for ex in data.get('examples', []) if lemmatize_phrase(ex)]
            if not examples:
                continue
            match = process.extractOne(replica_lemmatized, examples, scorer=fuzz.ratio)
            score = (match[1] / 100) if match else 0
            if score > best_score and score >= CONFIG['thresholds']['intent_score']:
                best_score = score
                best_intent = intent_key
        logger.info(
            f"Classify intent: text='{replica_lemmatized}', pred='{intent_pred}', best='{best_intent}', score={best_score}")
        return best_intent or intent_pred if best_score >= CONFIG['thresholds']['intent_score'] else None

    def _get_shoe_response(self, intent, shoe_name, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é –æ–±—É–≤–∏."""
        prod = PRODUCTS_MAP.get(shoe_name)
        if not prod:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
        template = random.choice(CONFIG['intents'][intent]['responses'])
        # –ó–∞–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        answer = template.replace('{shoe_name}', shoe_name).replace('{price}', str(prod['price']))
        answer = answer.replace('{description}', prod.get('description', '–æ—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å'))
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–ø–∏—Å–∫—É
        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –†–∞–¥, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è! üòä"
        elif sentiment == 'negative':
            answer += " –ü–æ–Ω–∏–º–∞—é —Å–æ–º–Ω–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–∏–º? üòä"
        return f"{answer} –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    def _find_shoe_by_context(self, replica, context):
        """–ò—â–µ—Ç –º–æ–¥–µ–ª—å –æ–±—É–≤–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
        last = context.user_data.get('last_bot_response', '')
        last_intent = context.user_data.get('last_intent', '')
        category = extract_shoe_category(replica)

        # –ï—Å–ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–ª–∏ –º–æ–¥–µ–ª—å
        if last and '–ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å' in last:
            return extract_shoe_name(last)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category:
            candidates = [name for name, p in PRODUCTS_MAP.items() if category in p.get('categories', [])]
            return random.choice(candidates) if candidates else None
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ–Ω—Ç –±—ã–ª –ø–æ–∫–∞–∑ —Ç–∏–ø–æ–≤
        if last_intent == Intent.SHOE_TYPES.value:
            for hist in reversed(context.user_data.get('history', [])):
                name = extract_shoe_name(hist)
                if name:
                    return name
        return None

    def _handle_filter_shoes(self, price, category, context):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø–æ —Ü–µ–Ω–µ –∏/–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        candidates = [
            name for name, p in PRODUCTS_MAP.items()
            if (not price or p['price'] <= price)
               and (not category or category in p.get('categories', []))
        ]
        used = [extract_shoe_name(h) for h in context.user_data.get('history', [])]
        candidates = [n for n in candidates if n not in used]

        if not candidates:
            conds = []
            if price:
                conds.append(f"–¥–æ {price}‚ÇΩ")
            if category:
                conds.append(f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–ª–æ—Å—å –º–æ–¥–µ–ª–µ–π –¥–ª—è {' –∏ '.join(conds)}."
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ‚Äî –¥–∞—ë–º —Å–æ–≤–µ—Ç
        if not price and not category:
            choice_name = random.choice(candidates)
            context.user_data['current_shoe'] = choice_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            return f"–†–µ–∫–æ–º–µ–Ω–¥—É—é {choice_name}! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏–ª–∏ –¥–µ—Ç–∞–ª–∏?"
        # –ò–Ω–∞—á–µ ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        return "–ù–∞—à–ª–∏—Å—å —Ç–∞–∫–∏–µ –º–æ–¥–µ–ª–∏: " + ", ".join(candidates)

    def get_answer_by_intent(self, intent, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞."""
        shoe_name = context.user_data.get('current_shoe')
        last_intent = context.user_data.get('last_intent', '')
        category = extract_shoe_category(replica)
        price = extract_price(replica)

        if intent not in CONFIG['intents']:
            return None
        responses = CONFIG['intents'][intent]['responses']
        if not responses:
            return None
        answer = random.choice(responses)
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞
        sentiment = analyze_sentiment(replica)
        suffix = ""
        if sentiment == 'positive':
            suffix = " –†–∞–¥, —á—Ç–æ –≤—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
        elif sentiment == 'negative':
            suffix = " –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤ –¥—É—Ö–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ! üòä"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        if intent in [Intent.SHOE_PRICE.value, Intent.SHOE_AVAILABILITY.value, Intent.SHOE_INFO.value]:
            if not shoe_name:
                # –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                shoe_name = self._find_shoe_by_context(replica, context)
                if shoe_name:
                    context.user_data['current_shoe'] = shoe_name
                    context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                    return f"–ò–∑ {category or '–∫–∞—Ç–∞–ª–æ–≥–∞'} –¥–æ—Å—Ç—É–ø–Ω—ã {shoe_name}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?{suffix}"
                context.user_data['state'] = BotState.WAITING_FOR_ITEM.value
                return f"–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.{suffix}"
            return self._get_shoe_response(intent, shoe_name, replica, context)

        elif intent == Intent.SHOE_RECOMMENDATION.value:
            answer = self._handle_filter_shoes(None, category, context)

        elif intent == Intent.FILTER_SHOES.value:
            if price or category:
                answer = self._handle_filter_shoes(price, category, context)
            else:
                return f"–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.{suffix}"

        elif intent == Intent.SHOE_TYPES.value:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä—è–º–æ –Ω–∞–∑–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–µ–π
            category = extract_shoe_category(replica)
            if category:
                items = [name for name, p in PRODUCTS_MAP.items() if category in p.get('categories', [])]
                if items:
                    answer = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –µ—Å—Ç—å: {', '.join(items)}."
                else:
                    answer = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –ø–æ—Ç–æ–º –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å
                context.user_data['current_shoe'] = None
                return answer
            # –ò–Ω–∞—á–µ ‚Äî –æ–±—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π
            cats = list({c for p in PRODUCTS_MAP.values() for c in p.get('categories', [])})
            some = random.sample(cats, min(3, len(cats)))
            example = random.sample(list(PRODUCTS_MAP.keys()), 2)
            answer = f"–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {', '.join(some)} –∏ –º–æ–¥–µ–ª–∏ –≤—Ä–æ–¥–µ {', '.join(example)}. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?{suffix}"
            context.user_data['current_shoe'] = None

        elif intent == Intent.COMPARE_SHOES.value:
            text_lem = lemmatize_phrase(replica)
            found = []
            for name, data in PRODUCTS_MAP.items():
                name_lem = lemmatize_phrase(name)
                if name_lem in text_lem:
                    found.append(name)
                else:
                    for syn in data.get('synonyms', []):
                        if lemmatize_phrase(syn) in text_lem:
                            found.append(name)
                            break
            if len(found) >= 2:
                s1, s2 = found[0], found[1]
            else:
                s1, s2 = random.sample(list(PRODUCTS_MAP.keys()), 2)
            answer = answer.replace('[shoe1]', s1).replace('[shoe2]', s2) + suffix
            
        elif intent == Intent.BOOK_FITTING.value:
            if not shoe_name:
                context.user_data['state'] = BotState.WAITING_FOR_ITEM.value
                return f"–ö–∞–∫—É—é –º–æ–¥–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å?{suffix}"
            template = random.choice(responses)
            answer = template.replace('{shoe_name}', shoe_name) + suffix
            return answer

        elif intent == Intent.YES.value:
            # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ—Ç–∞–ª—è–º –ø–æ YES/NO –¥–ª—è –æ–±—É–≤–∏...
            answer = f"–ß—Ç–æ –µ—â—ë –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?{suffix}"

        elif intent == Intent.NO.value:
            context.user_data['current_shoe'] = None
            context.user_data['state'] = BotState.NONE.value
            answer = f"–•–æ—Ä–æ—à–æ, –∫–∞–∫—É—é –º–æ–¥–µ–ª—å –æ–±—Å—É–¥–∏–º –¥–∞–ª—å—à–µ?{suffix}"

        context.user_data['last_intent'] = intent
        return answer

    def generate_answer(self, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤."""
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized or not self.answers:
            return None
        if not is_meaningful_text(replica):
            return None
        replica_vector = self.tfidf_vectorizer.transform([replica_lemmatized])
        similarities = cosine_similarity(replica_vector, self.tfidf_matrix).flatten()
        best_idx = similarities.argmax()
        if similarities[best_idx] > CONFIG['thresholds']['dialogues_similarity']:
            answer = self.answers[best_idx]
            logger.info(
                f"Found in dialogues.txt: replica='{replica_lemmatized}', answer='{answer}', similarity={similarities[best_idx]}")
            sentiment = analyze_sentiment(replica)
            if sentiment == 'positive':
                answer += " –†–∞–¥, —á—Ç–æ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
            elif sentiment == 'negative':
                answer += " –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤ –¥—É—Ö–µ. –ú–æ–∂–µ—Ç, –Ω–æ–≤—ã–π –∞–≤—Ç–æ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòä"
            if random.random() < 0.3:
                promo = random.choice(list(PRODUCTS_MAP.keys()))
                answer += f" –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å {promo} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!"
            context.user_data['last_intent'] = 'offtopic'
            return answer
        logger.info(f"No match in dialogues.txt for replica='{replica_lemmatized}'")
        return None

    def get_failure_phrase(self, replica):
        """–§—Ä–∞–∑–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Å —É—á—ë—Ç–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        promo = random.choice(list(PRODUCTS_MAP.keys()))
        answer = random.choice(CONFIG['failure_phrases']).replace('[shoe_name]', promo)
        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –í—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ ‚Äî –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º! üòä"
        elif sentiment == 'negative':
            answer += " –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞–π–¥–µ–º –ª—É—á—à–µ–µ! üòä"
        return answer
    def _process_none_state(self, replica, context):
        shoe = extract_shoe_name(replica)
        if shoe:
            context.user_data['current_shoe']=shoe
            context.user_data['state']=BotState.WAITING_FOR_INTENT.value
            suffix = " –†–∞–¥! üòä" if analyze_sentiment(replica)=='positive' else " –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º. üòä"
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {shoe}? –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?{suffix}"
        category = extract_shoe_category(replica)
        if category:
            cand = [n for n,p in PRODUCTS_MAP.items() if category in p.get('categories',[])]
            if cand:
                shoe = random.choice(cand)
                context.user_data['current_shoe']=shoe
                context.user_data['state']=BotState.WAITING_FOR_INTENT.value
                suffix = " –û—Ç–ª–∏—á–Ω–æ! üòä"
                return f"–ò–∑ {category} –µ—Å—Ç—å {shoe}. –ß—Ç–æ —É–∑–Ω–∞—Ç—å?{suffix}"
            return f"–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é."
        intent = self.classify_intent(replica)
        if intent:
            return self.get_answer_by_intent(intent, replica, context)
        return self.generate_answer(replica, context) or self.get_failure_phrase(replica)

    def _process_waiting_for_item(self, replica, context):
        shoe = extract_shoe_name(replica)
        if shoe and shoe in PRODUCTS_MAP:
            context.user_data['current_shoe']=shoe
            context.user_data['state']=BotState.WAITING_FOR_INTENT.value
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {shoe}? –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
        category = extract_shoe_category(replica)
        if category:
            cand = [n for n,p in PRODUCTS_MAP.items() if category in p.get('categories',[])]
            if cand:
                shoe = random.choice(cand)
                context.user_data['current_shoe']=shoe
                context.user_data['state']=BotState.WAITING_FOR_INTENT.value
                return f"–ò–∑ {category} –µ—Å—Ç—å {shoe}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
        return "–£—Ç–æ—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –æ–±—É–≤–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."

    def _process_waiting_for_intent(self, replica, context):
        shoe = extract_shoe_name(replica) or context.user_data.get('current_shoe')
        intent = self.classify_intent(replica)
        if intent in [Intent.SHOE_PRICE.value, Intent.SHOE_AVAILABILITY.value, Intent.SHOE_INFO.value]:
            context.user_data['state']=BotState.NONE.value
            return self._get_shoe_response(intent, shoe, replica, context)
        return self.get_answer_by_intent(intent, replica, context) or "–ß—Ç–æ –µ—â—ë?"

    def process(self, replica, context):
        stats = Stats(context)
        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
        if not is_meaningful_text(replica):
            answer = self.get_failure_phrase(replica)
            stats.add(ResponseType.FAILURE.value, replica, answer, context)
            return answer
        
        # 2) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å —è–≤–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
        intent = self.classify_intent(replica)
        if intent:
            answer = self.get_answer_by_intent(intent, replica, context)
            stats.add(ResponseType.INTENT.value, replica, answer, context)
            return answer

        # 3) Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –ø—Ä–æ–±—É–µ–º corpus (dialogues.txt)
        answer = self.generate_answer(replica, context)
        if answer:
            stats.add(ResponseType.GENERATE.value, replica, answer, context)
            return answer

        # 4) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        if not extract_shoe_name(replica):
            price = extract_price(replica)
            category = extract_shoe_category(replica)
            if price:
                answer = self._handle_filter_shoes(price, category, context)
                stats.add(ResponseType.INTENT.value, replica, answer, context)
                return answer

        state = context.user_data.get('state', BotState.NONE.value)
        if state == BotState.WAITING_FOR_ITEM.value:
            answer = self._process_waiting_for_item(replica, context)
        elif state == BotState.WAITING_FOR_INTENT.value:
            answer = self._process_waiting_for_intent(replica, context)
        else:
            answer = self._process_none_state(replica, context)

        stats.add(ResponseType.INTENT.value, replica, answer, context)
        return answer

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['start_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = Intent.HELLO.value
    await update.message.reply_text(answer)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['help_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = 'help'
    await update.message.reply_text(answer)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.user_data.get('stats', {ResponseType.INTENT.value: 0, ResponseType.GENERATE.value: 0,
                                            ResponseType.FAILURE.value: 0})
    answer = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {stats[ResponseType.INTENT.value]}\n"
        f"–û—Ç–≤–µ—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {stats[ResponseType.GENERATE.value]}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[ResponseType.FAILURE.value]}"
    )
    await update.message.reply_text(answer)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    if not user_text:
        answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
        return
    bot = context.bot_data.setdefault('bot', Bot())
    answer = bot.process(user_text, context)
    shoe = context.user_data.get('current_shoe')
    last_photo = context.user_data.get('last_photo_shown_for')
    await update.message.reply_text(answer)
    if shoe and shoe in PRODUCTS_MAP and shoe != last_photo:
        url = PRODUCTS_MAP[shoe].get('image_url')
        if url:
            await update.message.reply_photo(photo=url)
            context.user_data['last_photo_shown_for'] = shoe

# –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
def text_to_voice(text):
    if not text:
        return None
    try:
        tts = gTTS(text=text, lang='ru')
        voice_file = 'response.mp3'
        tts.save(voice_file)
        return voice_file
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}\n{traceback.format_exc()}")
        return None

def voice_to_text(voice_file):
    recognizer = sr.Recognizer()
    try:
        import signal
        def signal_handler(signum, frame):
            raise TimeoutError("Speech recognition timed out")

        signal.signal(signal.SIGALRM, signal_handler)
        signal.alarm(5)  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        audio = AudioSegment.from_ogg(voice_file)
        audio.export('voice.wav', format='wav')
        with sr.AudioFile('voice.wav') as source:
            audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language='ru-RU')
        return text
    except (sr.UnknownValueError, sr.RequestError, TimeoutError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}\n{traceback.format_exc()}")
        return None
    finally:
        signal.alarm(0)
        if os.path.exists('voice.wav'):
            os.remove('voice.wav')

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    bot = context.bot_data.setdefault('bot', Bot())
    try:
        voice_file = await context.bot.get_file(voice.file_id)
        await voice_file.download_to_drive('voice.ogg')
        text = voice_to_text('voice.ogg')
        if text:
            answer = bot.process(text, context)
            voice_response = text_to_voice(answer)
            if voice_response:
                with open(voice_response, 'rb') as audio:
                    await update.message.reply_voice(audio)
                os.remove(voice_response)
            else:
                await update.message.reply_text(answer)
        else:
            answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            context.user_data['last_bot_response'] = answer
            await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
    finally:
        if os.path.exists('voice.ogg'):
            os.remove('voice.ogg')

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def run_bot():
    if not TOKEN:
        raise ValueError('TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω')
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('stats', stats_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    logger.info('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
    app.run_polling()

if __name__ == '__main__':
    run_bot()